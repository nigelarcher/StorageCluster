--[[
 _    _              _      _             
| |  | |            | |    | |            
| |  | |  ___   ___ | |__  | |  ___  _ __ 
| |/\| | / _ \ / _ \| '_ \ | | / _ \| '__|
\  /\  /|  __/|  __/| |_) || ||  __/| |   
 \/  \/  \___| \___||_.__/ |_| \___||_|   

Copyright (c)2013  Horace Weebler

This program is part of a collection of works currently lacking a
decent title.  However, the idea is storage.  Storage that is
highly customizable, easily deployed, and modular.

This program is free software: you can redistribute it and/or modify
it any way you like.  However, please let me know if you do modify it
as I would appreciate ideas and feedback.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. In short,
don't blame me if your server blows up.

--]]

-- Config
screenw,screenh = term.getSize()
-- Config
local program = "Storage Cluster"
local version = "v1.1"
local author = "Horace"
local systemFrequency = "Default"
local systemSubfrequency = "A"

local systemConfig = { [0] = { systemFrequency = systemFrequency, systemSubfrequency = systemSubfrequency }  }

-- Functions
function saveTableToFile(table,name)
	local file = fs.open(name,"w")
	file.write(textutils.serialize(table))
	file.close()
end

function loadTableFromFile(name)
	if ( fs.exists(name) ~= true ) then
		return nil
	end
	local file = fs.open(name,"r")
	local data = file.readAll()
	file.close()
	return textutils.unserialize(data)
end

function printReverse(str, xpos, ypos)
	term.setCursorPos(xpos - (#str-1), ypos)
	term.write (str)
end

function printForward(str, xpos, ypos)
	term.setCursorPos(xpos, ypos)
	term.write (str)
end

function printCentered(str, ypos)
	term.setCursorPos(screenw/2 - #str/2, ypos)
	term.write(str)
end

function printRight(str, ypos)
	term.setCursorPos(screenw - #str, ypos)
	term.write(str)
end

function printLeft(str, ypos)
	term.setCursorPos(1, ypos)
	term.write(str)
end

local itemTable = {}

 function makemsg(idfrom, idto, msgType, msg)
	local final = ""
	final = "HORACEV1A|" .. systemConfig[0].systemFrequency .. "::" .. systemConfig[0].systemSubfrequency .. "|" .. idfrom .. "|" .. idto .. "|" .. msgType .."|" .. msg
	return final
end



function explode(div,str)
    if (div=='') then return false end
    local pos,arr = 0,{}
    for st,sp in function() return string.find(str,div,pos,true) end do
        table.insert(arr,string.sub(str,pos,st-1))
        pos = sp + 1
    end
    table.insert(arr,string.sub(str,pos))
    return arr
end

function processRestartCmd(idFrom)
	os.reboot()
end

function sendCmd( toid, cmd )
	--print( "Sending [ " .. cmd .. "], to ID " .. toid )
	if (toid == 0) then
		rednet.broadcast(cmd)
		else
			rednet.send( toid, cmd )
	end
	
end

function processQueryCmd(idFrom)
	local b, s = locateSorter()
	if ( b == true ) then

		local st = {}
		st.computerLabel = os.getComputerLabel()
		st.computerID = os.getComputerID()
		st.resources = {}
		st.resources = queryStorage( s )
	--	print("serializing..")
		--print(to_string(st))
		local sts = textutils.serialize(st)
	--	print("serializing done")
		local msg = makemsg( os.getComputerID(), idFrom, "queryStorageClustersResponse", sts )

		sendCmd(tonumber(idFrom), msg)
	end

end
function processDumpCmd(idFrom, ct, cmd)
	local b, s = locateSorter()
	--local cmdt = textutils.unserialize(cmd)
	if ( b == false ) then
	 	local tb = {}
		tb.msg = "Error, no sorter found"
		tb.result = false
		local msg = makemsg( os.getComputerID(), idFrom, "dumpResponse", textutils.serialize(tb) )
		sendCmd(idFrom, msg)	
		return false
	end	
		local tmp = queryStorage( s )
	if( tmp == nil or type(tmp) ~= "table" ) then
		local tb = {}
		tb.msg = "Error, no sorter found"
		tb.result = false
		local msg = makemsg( os.getComputerID(), idFrom, "dumpResponse", textutils.serialize(tb) )
		sendCmd(idFrom, msg)	
		return false
	end
	dump()
	local tb = {}
	tb.msg = "dumped contents"
	tb.result = true
	local msg = makemsg( os.getComputerID(), 0, "dumpResponse", textutils.serialize(tb)  )
	sendCmd(0, msg)	
	local msg = makemsg( os.getComputerID(), idFrom, "dumpResponse", textutils.serialize(tb)  )
	sendCmd(idFrom, msg)	
	return false
end

function processGetCmd(idFrom, ct, cmd)
	--print(cmd)
	local b, s = locateSorter()
	local cmdt = textutils.unserialize(cmd)
	print(to_string(cmdt))
	if ( b == false ) then
	 	local tb = {}
		tb.msg = "Error, no sorter found"
		tb.result = false
		local msg = makemsg( os.getComputerID(), idFrom, "response", to_string(tb) )
		sendCmd(idFrom, msg)	
		return false
	end	
		local tmp = queryStorage( s )
	if( #tmp == 0 or type(tmp) ~= "table" ) then
		local tb = {}
		tb.msg = "Error, no sorter found"
		tb.result = false
		local msg = makemsg( os.getComputerID(), idFrom, "response", to_string(tb) )
		sendCmd(idFrom, msg)	
		return false
	end

	for item = 1, #tmp do
		for key, value in pairs (tmp[item]) do
			print(value.uuid)
			if ( cmdt.uuid == value.uuid ) then
				local rb, rs, am = pushUIDOut(value.uuid, cmdt.amount, s)
				if ( rb == true ) then
					local tb = {}
					tb.msg = rs
					tb.result = true
					tb.amount = am
					tb.uuid = value.uuid
					local msg = makemsg( os.getComputerID(), idFrom, "getResponse", textutils.serialize(tb) )
					sendCmd(idFrom, msg)
					msg = makemsg( os.getComputerID(), 0, "getResponse", textutils.serialize(tb) )
					sendCmd(0, msg)
					print(msg)
					return true
					else
						local tb = {}
						tb.msg = rs
						tb.result = false
						tb.amount = 0
						tb.uuid = value.uuid
						local msg = makemsg( os.getComputerID(), idFrom, "getResponse", textutils.serialize(tb) )
						sendCmd(idFrom, msg)
						msg = makemsg( os.getComputerID(), 0, "getResponse", textutils.serialize(tb) )
						sendCmd(0, msg)
						return false
				end
			end -- if same uuid
		end -- for each item
	end -- for loop

	local tb = {}
	tb.msg = "Unable to service request, no item found matching UID " .. cmdt.uuid
	tb.result = false
	local msg = makemsg( os.getComputerID(), idFrom, "response", to_string(tb) )
	sendCmd(idFrom, msg)	
	return false
end


function processCmd(idFrom, ct, cmd)

	for i,v in pairs(explode("|", ct)) do
		if( v:lower() == "querystorageclusters" ) then
			print( "Query received" )
			processQueryCmd(idFrom)
		end
		if( v:lower() == "restart" ) then
			print("Restart received")
			sleep(5)
			processRestartCmd(idFrom);
		end
		if( v:lower() == "get" ) then
			print( "Get received" )
			processGetCmd(idFrom, ct, cmd)
		end
		if( v:lower() == "dump" ) then
			print( "Dump received" )
			processDumpCmd(idFrom, ct, cmd)
		end
	end
end

function validateWeeblerMsg( msg )
	 --print("Validating message... ")
	 local m = 0
	 local ret = false
	 local cmd = nill
	 local cmdType = nill
	 local directedTo = 0
	 for i,v in pairs(explode("|", message)) do
		 if ( m == 0 ) then
			 if( v == "HORACEV1A" ) then
				-- print("WeeblerV1 message: TRUE")
				 else
					 return ret
			 end
		 end
		 if ( m == 1 ) then -- this is our frequency/subfrequency area
			local curFreq = systemConfig[0].systemFrequency .. "::" .. systemConfig[0].systemSubfrequency
			if( v:lower() == curFreq:lower() ) then
				else
					return ret -- fail
			end
		 end
		 if ( m == 2 ) then
			 --print( "Msg From: " .. v )
		 end
		 if ( m == 3 ) then
			if( tonumber(v) == os.getComputerID() ) then
				--print("Received a message to us! " .. msg)
				directedTo = tonumber(v)

			end
			 if ( v ~= "0" and tonumber(v) ~= os.getComputerID() ) then
				 --print( "Msg To: " .. v .. " which is not us, validation falied.")
				 --directedTo = tonumber(v)
				 return false
				 else
					 ret = true
					
			 end
		 end
		 if ( m == 4 ) then
			 --print( "CmdType: " .. v )
			 ctype = v
			 --cmd = v
			 --return ret, cmd
		 end
		 if ( m == 5 ) then
			 --print( "Command: " .. v )
			 cmd = v
			 return ret, ctype, cmd, directedTo
		 end
		 --print("[" .. i .. "] = " .. v)
		 m = m+1
	 end
	 return ret
 end

function table_print (tt, indent, done)
  done = done or {}
  indent = indent or 0
  if type(tt) == "table" then
    local sb = {}
    for key, value in pairs (tt) do
      table.insert(sb, string.rep (" ", indent)) -- indent it
      if type (value) == "table" and not done [value] then
        done [value] = true
        table.insert(sb, "{\n");
        table.insert(sb, table_print (value, indent + 2, done))
        table.insert(sb, string.rep (" ", indent)) -- indent it
        table.insert(sb, "}\n");
      elseif "number" == type(key) then
        table.insert(sb, string.format("\"%s\"\n", tostring(value)))
      else
        table.insert(sb, string.format(
            "%s = \"%s\"\n", tostring (key), tostring(value)))
       end
    end
    return table.concat(sb)
  else
    return tt .. "\n"
  end
end

function to_string( tbl )
    if  "nil"       == type( tbl ) then
        return tostring(nil)
    elseif  "table" == type( tbl ) then
        return table_print(tbl)
    elseif  "string" == type( tbl ) then
        return tbl
    else
        return tostring(tbl)
    end
end


 -- Gets the Unique ID based on the ID and Meta
function getID(id, meta)
  if meta == nil then
    meta = 27268
  else
    meta = bit.bxor(meta, 0x6E6C)
  end
  local uuid = bit.bxor(id, 0x4F89) * 0x8000 + bit.bxor(meta, 0x3A69)
  return uuid
end

-- Get a stack table from a single uuid and amount
-- This does all the math to reverse the unique ID algorithm that RG wrote.
-- Valid for version 2.3
function getStack(uuid, c, pos)
        -- Reverse RG's fancy math
        local subt = bit.band(uuid, 0x7fff)
        local dexorm = bit.bxor(subt, 0x3a69)
        local metadata = nil
        if dexorm ~= 28262 then -- item takes dmg
                metadata = bit.bxor(dexorm, 0x6e6c)
        end
        local id = bit.bxor((uuid-subt)/0x8000, 0x4f89)
        -- put it in to a nice table
        local stack = {}
        stack.amount = c
        stack.id = id
        stack.meta = metadata
        stack.uuid = uuid
        stack.pos = pos

        return stack
end
 
-- Get stacks from an Interactive Sorter
-- direction   : the direction of the Interactive Sorter Peripheral
-- invDirection: the direction of the inventory from the peripheral
-- valid options for invDirection are 0,1,2,3,4,5 ( original values),
-- north, south, east, west, up, down, and the +/-X,Y,Z strings.
-- (see directions variable)
function getStacks(direction, invDirection)
		--print("getStacks, direction = " .. direction .. "invDirection = " .. invDirection )
        if not peripheral.isPresent(direction) then
				--print("No Peripheral")
                return false, "No Peripheral"
        end
		--print ("Type " .. peripheral.getType(direction))
        if peripheral.getType(direction) ~= "interactiveSorter" then
                return false, "Not a sorter"
        end
        local stacks = {}
       
        for uuid,count in pairs(peripheral.call(direction, "list", invDirection)) do-- directions[invDirection])) do
                table.insert(stacks, getStack(uuid, count, invDirection))
        end
        return true, stacks    
end

function dump()
		local found
		local dirs = { 0, 1, 2, 3, 4, 5 }
		local b, sort = locateSorter()
		local nestedStacks = {}
	
		for i, dir in ipairs(dirs) do
			local stacks = {}
			local t = nill
			local cont = true
			while ( cont == true ) do
				local b = peripheral.call(sort, "list", dir)
				p = peripheral.wrap(sort)
				
				if ( b ~= nill ) then
					print( "dumping.. ")
					--print(to_string(peripheral.getMethods(sort)))
					--local totalItemCount = 0
					--local curUUID = nil
					--local tmd = pairs(b)
					--print( to_string(b))
					if #to_string(b) == 0 then
						cont = false
					--	print("dont continue .." .. dir)
						
					end
						for uuid,count in pairs(b) do
							--curUUID = uuid
							--totalItemCount = totalItemCount + count
							--print( "UID " .. uuid .. " Count = " .. count )
							
							if ( count ~= 0 ) then
								
								p.extract(dir,uuid,0,count)
								else
									cont = false
							end
								sleep(1)
						end
					else
					--	print("dont continue" .. dir)
						cont = false
				end
			end
		end
end

function pushUIDOut( uid, amt, s )
		local found
		local dirs = { 0, 1, 2, 3, 4, 5 }
		local b, sort = locateSorter()
		local nestedStacks = {}
		--print("Pushing " .. uid)
		for i, dir in ipairs(dirs) do
			local stacks = {}
			local t = nill
			local total_extracted = 0
			local b = peripheral.call(sort, "list", dir)
			p = peripheral.wrap(sort)
			if ( b ~= nill ) then
				--print(to_string(peripheral.getMethods(sort)))
				local totalItemCount = 0
				local curUUID = nil
				local found = false
				for uuid,count in pairs(b) do
					if( uid == uuid ) then
						totalItemCount = totalItemCount + count
						found = true
					end
					--curUUID = uuid
					
				
					--print( "curUUID " .. curUUID .. " Count = " .. count )
				end
				--print(curUUID .. " " .. uid)
				if ( found == true ) then
					print("FOUND MATCH")
					local loops = 1
					local leftover = amt
					if ( amt > 64 ) then
						loops = loops + math.floor(amt / 64)
						leftover = amt % 64
					end
					
					
					
					for curloop = 1, loops do
						--local loops = amt / 64
						if (curloop ~= loops) then
							local res = p.extract(dir,uid,0,64)
							if ( res ~= nil and res == 64) then
								total_extracted = total_extracted + res 
								else
									total_extracted = 0
									break
							end
							print ( "Extracing " .. res .. " loop " .. curloop )
							--return true, "Success. Extracting " .. 64 .. " of " .. totalItemCount .. ", UUID=" .. uid
							else
							local res = p.extract(dir,uid,0,leftover)
							if ( res ~= nil and res == leftover ) then
								total_extracted = total_extracted + res 
								else
									total_extracted = 0
									break
							end
							
							
		
						end
						
					end
					if( total_extracted == 0 ) then
						return false, "Zero items extracted when attempting to extract " .. amt  .. " of UUID " .. uid, 0
					end
					
					return true, "Success.. Extracted " .. amt  .. " of UUID " .. uid, total_extracted
				end
				
			end
		end
		return false, "No quantity of UUID " .. uid .. " found."
end
function queryStorage(direction)

		local found
		local dirs = { 0, 1, 2, 3, 4, 5 }
		local nestedStacks = {}
		for i, dir in ipairs(dirs) do
			local stacks = {}
			--print( "Probing side " .. dir .. ", direction = " .. direction )
			local t = nill
			local b = peripheral.call(direction, "list", dir)

			if ( b ~= nill ) then
			--	print("STUFF " .. to_string(b))
				for uuid,count in pairs(b) do

				table.insert(stacks, getStack(uuid, count, invDirection))
				--print(to_string(stacks))
				--sleep(5)
				--print(to_string{stacks})
				--print(to_string{stacks})
				
				end
				table.insert(nestedStacks, stacks)
			end

		end
		return nestedStacks -- textutils.serialize(nestedStacks)--to_string(nestedStacks)
		--print(to_string{nestedStacks})

end

function locateSorter()

		local dirs = { "top", "bottom", "back", "front", "left", "right" }
		--local dirs = {0, 1, 2, 3, 4, 5}
		local found = {}
		for i, dir in ipairs(dirs) do
		  --print (name)
		  	if peripheral.isPresent(dir) and peripheral.getType(dir) == "interactiveSorter" then
				--print("Found a sorter peripheral. Location = " .. dir)
				--queryStorage(dir)
				return true, dir
			end
		end
		return false, "no sorter found"
end



doSorter = function()
		local b, sort = locateSorter()
		p = peripheral.wrap(sort)
		local count = 0
	while true do
		local sEvent, param, param2 = os.pullEvent("isort_item")
		p.sort(0)
	end

end

--rednet.open("right")

mainLoop = function()
	print ("Main loop started, letting everyone know we're here!")
	
	local _config = loadTableFromFile("systemConfig")
	if( _config == nil ) then
		saveTableToFile( systemConfig, "systemConfig" )
		else
		systemConfig = _config
	end
	
	processQueryCmd(0)
	local heartbeat = os.clock()
	local nextbeat = math.random(60, 120)
	while true do
		if( os.clock() - heartbeat > nextbeat ) then
			heartbeat = os.clock()
			nextbeat = math.random(60, 120)
			processQueryCmd(0)
		end
		id, message  = rednet.receive(1)
		if id ~= nill then
			
			local b, c
			b, ct, c = validateWeeblerMsg(message)
			if  (b == true ) then
				--redstone.setOutput("front", false) -- blinky
				processCmd( id, ct, c)
				--redstone.setOutput("front", true) -- blinky
				else
			end
		end
		--sleep(1)
	end
end

function initModem()
		local dirs = { "top", "bottom", "back", "front", "left", "right" }
		for i, dir in ipairs(dirs) do
		  	if peripheral.isPresent(dir) and peripheral.getType(dir) == "modem" then
				rednet.open(dir)
				print("Found a modem on the " .. dir .. " side.")
				return true
			end
		end
		print("A modem must be attached for the storage interface application to function correctly.")
		return false
end
local modemInit = initModem()
if( modemInit ~= true ) then return end
if ( os.getComputerLabel() == nil or os.getComputerLabel == "" ) then
	os.setComputerLabel(tostring(os.getComputerID()))
end
print("Starting...")
--redstone.setOutput("front", true)
parallel.waitForAll (mainLoop, doSorter)

